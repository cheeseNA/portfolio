/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF, PerspectiveCamera } from "@react-three/drei";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    Boolean: THREE.Mesh;
  };
  materials: {};
};

export function CheeseModel(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/cheese.gltf") as GLTFResult;
  return (
    <group {...props} dispose={null}>
      <group scale={0.01}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Boolean.geometry}
          position={[12.0284, 31.6794, -9.2197]}
        >
          <meshStandardMaterial
            attach="material"
            color={0xffd700}
            roughness={0.4}
            metalness={0.4}
          />
        </mesh>
        <ambientLight />
        <directionalLight
          intensity={0.7}
          decay={2}
          rotation={[-0.5064, 0.629, 0.756]}
        />
        <PerspectiveCamera
          makeDefault={false}
          far={100000}
          near={70}
          fov={45}
          position={[-152.428, 126.3113, 163.8211]}
          rotation={[-0.5181, -0.7268, -0.362]}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/cheese.gltf");
