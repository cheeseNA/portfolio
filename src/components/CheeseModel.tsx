/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";

type GLTFResult = GLTF & {
  nodes: {
    Boolean: THREE.Mesh;
  };
  materials: {};
};

export function CheeseModel(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/cheese.gltf") as GLTFResult;
  const ref = useRef<THREE.Mesh>(null!);
  useFrame((state, delta) => (ref.current.rotation.y += delta * 0.6));

  return (
    <group {...props} dispose={null}>
      <group scale={0.02}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Boolean.geometry}
          ref={ref}
        >
          <meshStandardMaterial
          // wireframe
            attach="material"
            color={0xffd700}
            roughness={0.3}
            metalness={0}
          />
        </mesh>
      </group>
    </group>
  );
}

useGLTF.preload("/cheese.gltf");
